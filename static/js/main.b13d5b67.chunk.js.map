{"version":3,"sources":["components/Title.js","components/SearchForm.js","components/Movie.js","components/MovieList.js","components/ButtonBack.js","pages/Detail.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Title","children","className","SearchForm","state","inputMovie","_handleChange","e","setState","target","value","_handleSubmit","preventDefault","fetch","then","res","json","results","console","log","Search","totalResults","props","onResults","onSubmit","this","type","placeholder","onChange","href","Component","Movie","id","poster","title","year","key","src","alt","MovieList","movies","map","movie","imdbID","Poster","Year","ButtonBack","window","history","back","onClick","_goBack","Detail","_fetchMovie","Actors","Metascore","Plot","App","useSearch","_handleResults","length","url","URL","document","location","searchParams","has","get","logo","_renderResults","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.b13d5b67.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Title = ({children})=>(\n<h1 className=\"title is-1 has-text-light\">{children}</h1>\n)","import React, { Component } from 'react'\n\nconst API_KEY = '9fd26d39'\n\nexport class SearchForm extends Component{\n    state = {\n        inputMovie: ''\n    }\n\n    _handleChange = (e) => {\n        this.setState({ inputMovie: e.target.value })\n    }\n\n    _handleSubmit = (e) => {\n        e.preventDefault()\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${this.state.inputMovie}`) //Es asincrono\n        .then(res => res.json()) //devuelve un string de datos y lo tranformamos en json\n        .then(results  => {\n            console.log(results)// eslint-disable-next-line\n            const { Search = [], totalResults = \"\" } = results \n            this.props.onResults( Search )\n        })\n    }\n\n    render(){\n        return(\n            <form onSubmit={ this._handleSubmit } className=\"SearchForm-wrapper\">\n                <div className=\"field has-addons\">\n                    <div className = \"control\">\n                        <input  className = \"input\" \n                                type = \"text\" \n                                placeholder = \"Movie to search\"\n                                onChange = { this._handleChange }\n                        />\n                    </div>\n                    <div className=\"control\">\n                        <button className = \"button is-info\" href=\"#\">\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Movie extends Component{\n    static propTypes = {\n        id:     PropTypes.string,\n        title:  PropTypes.string,\n        year:   PropTypes.string, \n        poster: PropTypes.string\n    }\n\n    render(){\n        const { id, poster, title, year, key } = this.props \n        return(\n            <a href={`?id=${id}`} className=\"card\" key={key}>\n                <div className=\"card-image\">\n                    <figure className=\"image is-4by3\">\n                    <img src={poster} alt={title}/>\n                    </figure>\n                </div>\n                <div className=\"card-content\">\n                    <div className=\"content\">\n                        <p>{title}</p>\n                        <p>\n                            <time>{ year }</time>\n                        </p>\n                    </div>\n                </div>\n            </a>\n        )\n    }\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Movie } from './Movie'\n\nexport class MovieList extends Component{\n    static propTypes = {\n        movies: PropTypes.array\n    }\n\n    render(){\n\n        let { movies } = this.props\n\n        return movies.map( movie => {\n        return (\n            <div className=\"movie\" key = { movie.imdbID } >\n                <Movie\n                    id     = { movie.imdbID }\n                    title  = { movie.Title }\n                    poster = { movie.Poster }\n                    year   = { movie.Year } \n                 /> \n            </div>\n        )\n        })\n    }\n}","import React, { Component } from 'react'\n\nexport class ButtonBack extends Component{\n    _goBack(){\n        window.history.back();\n    }\n    render(){\n        return(\n            <button className=\"button is-white\" onClick={ this._goBack }>Go back</button>\n        )\n             \n    } \n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { ButtonBack } from '../components/ButtonBack'\n\nconst API_KEY = '9fd26d39'\n\nexport class Detail extends Component{\n    static propTypes = {\n        id: PropTypes.string\n    }\n\n    state =  { movie: {} }\n\n    _fetchMovie({ id }){\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`) //Es asincrono\n        .then(res => res.json()) //devuelve un string de datos y lo tranformamos en json\n        .then(movie  => {\n            this.setState({ movie })\n        })    \n    }\n\n    componentDidMount(){\n        let { id } = this.props\n        this._fetchMovie({ id });\n    }\n\n    _goBack(){\n        window.history.back();\n    }\n\n    render(){\n        let { Title, Poster, Actors, Metascore, Plot } = this.state.movie\n        return(\n\n            <div className=\"card-detail\">\n                <ButtonBack/>\n                <div className=\"card\">\n                    <div className=\"card-image\">\n                        <figure className=\"image is-4by3\">\n                            <img src={ Poster } alt={ Title }/>\n                        </figure>\n                    </div>\n                    <div className=\"card-content\">\n                        <div className=\"media\">\n                            <div className=\"media-content\">\n                                <p className=\"title is-2\">{ Title }</p>\n                                <p className=\"title is-4\">{ Actors }</p>\n                            </div>\n                        </div>\n\n                        <div className=\"content\"> \n                        <p> { Plot } </p>\n                        <p> { Metascore }</p>\n                        </div>\n                    </div>\n                    </div>\n\n            </div>\n\n        )\n    }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bulma/css/bulma.css';\n\nimport { Title } from './components/Title'\nimport { SearchForm } from './components/SearchForm'\nimport { MovieList } from './components/MovieList';\n\nimport { Detail } from './pages/Detail'\n\nclass App extends Component{\n  state = { useSearch: false, results:[] }\n\n  _handleResults = ( results ) => {\n    this.setState({ results, useSearch: true })\n  }\n\n  _renderResults() {\n    return(\n      this.state.results.length === 0 // eslint-disable-next-line\n      ? <p>Sorry! 😢 Results no found</p>\n      : <div className=\"movieList\"><MovieList movies={ this.state.results}/></div>\n    )     \n  }\n\n  render(){\n    let url   = new URL(document.location);\n    let hasId = url.searchParams.has('id');\n\n    if( hasId ){\n      return <Detail id={url.searchParams.get('id')}/>\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Title>Search Movies</Title>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n          <SearchForm onResults={ this._handleResults }/>\n          {\n            this.state.useSearch \n            ? this._renderResults()\n            : <small>Use the form to search a movie</small> \n          }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}