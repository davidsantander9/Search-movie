{"version":3,"sources":["logo.svg","components/ButtonBack.js","pages/Detail.js","components/Title.js","components/SearchForm.js","components/Movie.js","components/MovieList.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ButtonBack","window","history","back","className","onClick","this","_goBack","Component","Detail","state","movie","id","fetch","then","res","json","setState","props","match","params","_fetchMovie","Title","Poster","Actors","Metascore","Plot","src","alt","children","SearchForm","inputMovie","_handleChange","e","target","value","_handleSubmit","preventDefault","results","console","log","Search","totalResults","onResults","onSubmit","type","placeholder","onChange","href","Movie","poster","title","year","key","to","MovieList","movies","map","imdbID","Year","Home","useSearch","_handleResults","length","logo","_renderResults","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7935ea2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nexport class ButtonBack extends Component{\n    _goBack(){\n        window.history.back();\n    }\n    render(){\n        return(\n            <button className=\"button is-white\" onClick={ this._goBack }>Go back</button>\n        )\n             \n    } \n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { ButtonBack } from '../components/ButtonBack'\n\nconst API_KEY = '9fd26d39'\n\nexport class Detail extends Component{\n    static propTypes = {\n        match: PropTypes.shape({\n            params: PropTypes.object,\n            isExact: PropTypes.bool,\n            path: PropTypes.string,\n            url: PropTypes.string\n        })\n    }\n\n    state =  { movie: {} }\n\n    _fetchMovie({ id }){\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`) //Es asincrono\n        .then(res => res.json()) //devuelve un string de datos y lo tranformamos en json\n        .then(movie  => {\n            this.setState({ movie })\n        })    \n    }\n\n    componentDidMount(){\n        let { id } = this.props.match.params\n        this._fetchMovie({ id });\n    }\n\n    _goBack(){\n        window.history.back();\n    }\n\n    render(){\n        let { Title, Poster, Actors, Metascore, Plot } = this.state.movie\n        return(\n\n            <div className=\"card-detail\">\n                <ButtonBack/>\n                <div className=\"card\">\n                    <div className=\"card-image\">\n                        <figure className=\"image is-4by3\">\n                            <img src={ Poster } alt={ Title }/>\n                        </figure>\n                    </div>\n                    <div className=\"card-content\">\n                        <div className=\"media\">\n                            <div className=\"media-content\">\n                                <p className=\"title is-2\">{ Title }</p>\n                                <p className=\"title is-4\">{ Actors }</p>\n                            </div>\n                        </div>\n\n                        <div className=\"content\"> \n                        <p> { Plot } </p>\n                        <p> { Metascore }</p>\n                        </div>\n                    </div>\n                    </div>\n\n            </div>\n\n        )\n    }\n}","import React from 'react'\n\nexport const Title = ({children})=>(\n<h1 className=\"title is-1 has-text-light\">{children}</h1>\n)","import React, { Component } from 'react'\n\nconst API_KEY = '9fd26d39'\n\nexport class SearchForm extends Component{\n    state = {\n        inputMovie: ''\n    }\n\n    _handleChange = (e) => {\n        this.setState({ inputMovie: e.target.value })\n    }\n\n    _handleSubmit = (e) => {\n        e.preventDefault()\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${this.state.inputMovie}`) //Es asincrono\n        .then(res => res.json()) //devuelve un string de datos y lo tranformamos en json\n        .then(results  => {\n            console.log(results)// eslint-disable-next-line\n            const { Search = [], totalResults = \"\" } = results \n            this.props.onResults( Search )\n        })\n    }\n\n    render(){\n        return(\n            <form onSubmit={ this._handleSubmit } className=\"SearchForm-wrapper\">\n                <div className=\"field has-addons\">\n                    <div className = \"control\">\n                        <input  className = \"input\" \n                                type = \"text\" \n                                placeholder = \"Movie to search\"\n                                onChange = { this._handleChange }\n                        />\n                    </div>\n                    <div className=\"control\">\n                        <button className = \"button is-info\" href=\"#\">\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport class Movie extends Component{\n    static propTypes = {\n        id:     PropTypes.string,\n        title:  PropTypes.string,\n        year:   PropTypes.string, \n        poster: PropTypes.string\n    }\n\n    render(){\n        const { id, poster, title, year, key } = this.props \n        return(\n            <Link to={`/detail/${id}`}>\n                <div className=\"card\" key={key}>\n                    <div className=\"card-image\">\n                        <figure className=\"image is-4by3\">\n                        <img src={poster} alt={title}/>\n                        </figure>\n                    </div>\n                    <div className=\"card-content\">\n                        <div className=\"content\">\n                            <p>{title}</p>\n                            <p>\n                                <time>{ year }</time>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </Link>\n        )\n    }\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Movie } from './Movie'\n\nexport class MovieList extends Component{\n    static propTypes = {\n        movies: PropTypes.array\n    }\n\n    render(){\n\n        let { movies } = this.props\n\n        return movies.map( movie => {\n        return (\n            <div className=\"movie\" key = { movie.imdbID } >\n                <Movie\n                    id     = { movie.imdbID }\n                    title  = { movie.Title }\n                    poster = { movie.Poster }\n                    year   = { movie.Year } \n                 /> \n            </div>\n        )\n        })\n    }\n}","import React, {Component} from 'react'\nimport logo from '../logo.svg';\n\nimport { Title } from '../components/Title'\nimport { SearchForm } from '../components/SearchForm'\nimport { MovieList } from '../components/MovieList';\n\nexport class Home extends Component{\n    state = { useSearch: false, results:[] }\n\n    _handleResults = ( results ) => {\n        this.setState({ results, useSearch: true })\n    }\n\n    _renderResults() {\n        return(\n        this.state.results.length === 0 // eslint-disable-next-line\n        ? <p>Sorry! 😢 Results no found</p>\n        : <div className=\"movieList\"><MovieList movies={ this.state.results}/></div>\n        )     \n    }\n\n    render(){\n        return(\n            <div>\n                <header className=\"App-header\">\n                    <Title>Search Movies</Title>\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </header>\n                <SearchForm onResults={ this._handleResults }/>\n                {\n                this.state.useSearch \n                ? this._renderResults()\n                : <small>Use the form to search a movie</small> \n            }\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n \nimport './App.css';\nimport 'bulma/css/bulma.css';\n\nimport { Detail } from './pages/Detail'\nimport { Home } from './pages/Home'\n\nclass App extends Component{\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={ Home } />\n            <Route path='/detail/:id' component={ Detail } />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}